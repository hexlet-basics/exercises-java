---

name: Логический тип
theory: |

  Кроме арифметических операций со школы нам известны операции сравнения. Например, `5 > 4`. Это звучит как вопрос: «5 больше 4?». В данном случае ответ «да». В других случаях ответом может быть «нет», например, для `3 < 1`.

  Операции сравнения не имеют привязки к числам. Сравнивать можно практически всё что угодно, например, строки. Каждый раз, когда мы входим на какой-то сайт, внутри происходит сравнение введенных логина и пароля с теми, какие есть в базе. И только если они есть, нас пускают внутрь (авторизируют).

  Языки программирования адаптировали все математические операции сравнения практически в неизменном виде. Единственное серьезное отличие – операторы равенства и неравенства. В математике для этого используется обычное равно `=`, но в программировании такое встречается не часто. Во многих языках символ `=` используется для присваивания значений переменным, поэтому для сравнения взяли `==`.

  Список операций сравнения в Java:

  * `<` меньше
  * `<=` меньше или равно
  * `>` больше
  * `>=` больше или равно
  * `==` равно
  * `!=` не равно

  Логическая операция типа `5 > 4` или `password === text` — это выражение, и его результат — специальное значение `true` («истина») или `false` («ложь»). Это новый для нас тип данных — boolean. Он содержит всего лишь два этих значения.

  ```java
  var result = 5 > 4;
  System.out.println(result); // => true
  ```

  Попробуем написать метод, которая принимает на вход возраст ребенка и определяет, младенец ли он. Младенцами считаются дети до года:

  ```java
  // Метод возвращающий boolean называется предикатом
  // Обычно такие методы имеют префикс has can is was и т.п.
  public static boolean isInfant(int age) {
      return age < 1;
  }
  ```

  Пользуемся тем фактом, что любая операция — это выражение, поэтому единственной строчкой функции пишем «вернуть то значение, которое получится в результате сравнения `age < 1`». В зависимости от пришедшего параметра, сравнение будет либо истинным (`true`), либо ложным (`false`), и `return` вернёт этот результат.

  ```java
  System.out.println(App.isInfant(3)); // => false
  System.out.println(App.isInfant(0)); // => true
  ```

instructions: |

  Реализуйте метод `isPensioner()`, который принимает один параметр — возраст человека, и проверяет, является ли он пенсионным. Пенсионером считается человек, достигший возраста 60 лет и больше.

  Примеры вызова:

  ```java
  App.isPensioner(75); // true
  App.isPensioner(18); // false
  ```

definitions:
  - name: "Логический тип (boolean)"
    description: "тип данных с двумя возможными значениями: true (истина) и false (ложь)."
