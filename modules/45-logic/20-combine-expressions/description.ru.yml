---

name: Комбинирование операций и методов
theory: |

  Логические операции — это выражения. Значит, **логические операции можно комбинировать с другими выражениями**. Разберем на примере. Допустим мы хотим проверить чётность числа. В программировании четность проверяется через остаток от деления на 2:

  * если остаток 0, то число было чётным
  * если остаток не 0, то число было нечётным

  Остаток от деления — простая, но очень важная концепция в арифметике, алгебре, и даже в теории чисел и криптографии. Идея проста: нужно разделить число на несколько равных групп, и если в конце что-то останется — это и есть остаток от деления.

  Делим конфеты поровну между людьми:

  * 7 конфет, 2 человека: 2 x 3 + **остаток 1**. Значит, 7 не кратно 2
  * 21 конфету, 3 человека: 3 x 7 + **остаток 0**. Значит, 21 кратно 3
  * 19 конфет, 5 человек: 5 x 3 + **остаток 4**. Значит, 19 не кратно 5

  В коде, остаток вычисляется с помощью оператора `%`:

  * `7 % 2` → `1`
  * `21 % 3` → `0`
  * `19 % 5` → `4`

  С помощью него напишем метод для проверки чётности:

  ```java
  // Определен в классе App
  public static boolean isEven(int number) {
    return number % 2 == 0;
  }

  App.isEven(10); // true
  App.isEven(3);  // false
  ```

  В одном выражении мы скомбинировали логический оператор `==` (проверка равенства) и арифметический оператор `%`. **Приоритет арифметических операций выше логических.** Значит, сначала вычисляется арифметическое выражение `number % 2`, затем результат участвует в логическом сравнении.

  По-русски это можно расшифровать так: *«вычислить остаток от деления числа `number` на 2 и сравнить с нулем; затем вернуть результат сравнения*.

  Другой пример: напишем метод, который принимает строку и проверяет, заглавная ли первая буква.

  Алгоритм:

  1. Получим и запишем в переменную первый символ из строки-аргумента
  2. Сравним, равен ли символ своей большой (заглавной) версии
  3. Вернём результат

  ```java
  public static boolean isFirstLetterInUpperCase(String string) {
    var firstLetter = string.charAt(0);
    // Проверяет то, что переданный симол в верхнем регистре
    return Character.isUpperCase(firstLetter);
  }

  App.isFirstLetterInUpperCase("marmont"); // false
  App.isFirstLetterInUpperCase("Robb"); // true
  ```

instructions: |

  Реализуйте метод, который проверяет формат указанного телефона. Если телефон начинается с *+*, значит это международный формат.

  ```java
  App.isInternationalPhone("89602223423"); // false
  App.isInternationalPhone("+79602223423"); // true
  ```

# tips:
#   - |
#     Подробнее изучить метод `startsWith()` можно на странице [java.lang.String](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#startsWith(java.lang.String))
