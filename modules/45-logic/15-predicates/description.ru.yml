---

name: Предикаты
theory: |

  Вспомним функцию `isInfant` из прошлого урока:

  ```java
  static boolean isInfant(int age) {
      return age < 1;
  }
  ```

  `isInfant` — это функция-предикат.

  **Предикат отвечает на утвердительный вопрос «да» или «нет», возвращая значение типа boolean.**

  Предикаты во всех языках принято именовать особым образом для простоты анализа. В Java предикаты как правило начинаются с префикса `is` или `has`:

    * `isInfant` — «младенец ли?»
    * `hasChildren` — «есть ли дети?»
    * `isEmpty` — «пустой ли?»
    * `hasErrors` — «есть ли ошибки?»

  Функция может считаться предикатом, **только** если она возвращает boolean.

  ---

  Давайте напишем еще одну функцию-предикат. Она принимает строку и проверяет, пустая ли она. Пустой строкой называется строка "" - ее длина равна 0. Как мы помним, для вычисления длины строки str можно использовать выражение str.length():

  ```java
  public static void main(String[] args) {
    System.out.println(isEmpty("Sea"));
  }

  static boolean isEmpty(String str) {
      return str.length() == 0;
  }
  ```

  <pre class='hexlet-basics-output'>false</pre>


instructions: |

  Напишите функцию `isNegative()`, которая принимает число и проверяет, является ли оно отрицательным.

  ```java
  App.isNegative(-45); // true
  App.isNegative(34); // false
  ```

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)

# definitions:
#   - name: "Предикат"
#     description: "выражение, отвечающее на вопрос «да» или «нет» с помощью типа boolean."
