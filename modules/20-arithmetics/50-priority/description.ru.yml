---

name: Приоритет операций
theory: |
  Посмотрите внимательно на выражение *2 + 2 * 2* и посчитайте в уме ответ.

  Правильный ответ: *6*.

  Если у вас получилось *8*, то этот урок для вас. В школьной математике мы изучали понятие «приоритет операции». Приоритет определяет то, в какой последовательности должны выполняться операции. Например, умножение и деление имеют больший приоритет, чем сложение и вычитание: *2 + 3 * 2* вычислится в *8*.

  Но нередко вычисления должны происходить в порядке, отличном от стандартного приоритета. В сложных ситуациях приоритет можно (и нужно) задавать круглыми скобками, точно так же, как в школе, например: `(2 + 2) * 2`.

  Скобки можно ставить вокруг любой операции. Они могут вкладываться друг в друга сколько угодно раз. Вот пара примеров:

  ```java
  System.out.println(3 * (4 - 2)); // => 6
  System.out.println(7 * 3 + (4 / 2) - (8 + (2 - 1))); // => 14
  ```

  Иногда выражение сложно воспринимать визуально. Тогда можно расставить скобки, не повлияв на приоритет. Например, задание из прошлого урока можно сделать немного понятнее, если расставить скобки.

  Было:

  ```java
  System.out.println(8 / 2 + 5 - -3 / 2); // => 10
  ```

  Стало:

  ```java
  System.out.println(((8 / 2) + 5) - (-3 / 2)); // => 10
  ```

  Запомните: код пишется для людей, потому что код будут читать люди, а машины будут только исполнять его. Для машин нет «более» понятного или «менее» понятного кода, независимо от того, является ли код корректным или нет.

instructions: |

  Дано выражение `70 * 3 + 4 / 8 + 2`.

  Расставьте скобки так, чтобы оба сложения (`3 + 4` и `8 + 2`) высчитывались в первую очередь. Выведите результат на экран.

# tips: []
