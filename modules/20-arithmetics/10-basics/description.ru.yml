---

name: Арифметические операции
theory: |
  Для сложения двух чисел в математике мы пишем, например, `3 + 4`. В программировании — то же самое. Вот программа, складывающая два числа:

  ```java
  3 + 4;
  ```

  Арифметика в программировании практически не отличается от школьной арифметики.

  Строчка кода `3 + 4;` заставит компьютер сложить числа и узнать результат. Эта программа будет работать, но в ней нет смысла, потому что по сути **мы не даём команду** компьютеру, мы просто говорим ему «смотри, сумма трёх и четырёх». В реальной работе недостаточно сообщать компьютеру о математическом выражении. Например, при создании интернет-магазина недостаточно просить компьютер посчитать стоимость товаров в корзине, а нужно просить посчитать стоимость **И** показать цену покупателю.

  Нам нужно попросить компьютер сложить `3 + 4` **И** дать команду сделать что-то с результатом. Например, вывести его на экран:

  ```java
  System.out.println(3 + 4);
  ```

  После запуска на экране появится результат:

  <pre class='hexlet-basics-output'>7</pre>

  Кроме сложения доступны следующие операции:

  * `*` — умножение
  * `/` — деление
  * `-` — вычитание
  * `%` — [остаток от деления](https://ru.wikipedia.org/wiki/Деление_с_остатком)

  Теперь давайте выведем на экран результат деления, а потом результат возведения в степень:

  ```java
  System.out.println(8 / 2);  // => 4
  System.out.println(3 * 3 * 3); // => 27
  ```

  > Иногда для удобства мы будем показывать в комментариях результат запуска строчек кода вот так: `=> РЕЗУЛЬТАТ`. Например, `// => 4`.

  Первая инструкция выведет на экран `4` (потому что 8 / 2 это 4), а вторая инструкция выведет на экран 27 (потому что трижды умножить три это 27):

  <pre class='hexlet-basics-output'>
  4
  27
  </pre>

  Заметьте, `println` выводит значение на экран и завершает текущую строку, в отличие от `print`. Если бы мы использовали `print`, то увидели бы в консоли это:

  <pre class='hexlet-basics-output'>427</pre>

  "427" выведено одной строкой — это явно не то, что мы хотим видеть, когда выводим _несколько_ результатов вычислений!

instructions: |

  Выведите на экран результат деления числа `81` на `9`. В этот раз используйте для вывода `println`.
  <pre class='hexlet-basics-output'>9</pre>

tips:
  - |
    У команд `println` и `print` будут разные результаты в тестах — разница заключается в том самом переводе строки.
  - Всегда отбивайте арифметические операторы пробелами от самих чисел (операндов) – это хороший стиль программирования. Поэтому в наших примерах `System.out.println(3 + 4)`, а не `System.out.println(3+4)`.
  - Деление на ноль приводит к ошибке. Чтобы его не допустить, нужно знать про условные конструкции (о них вы узнаете в следующих уроках).
