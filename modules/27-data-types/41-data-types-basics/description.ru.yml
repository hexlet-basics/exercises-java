---

name: Типы данных
theory: |

  Типы данных в Java делятся на две важные группы по тому, как связаны переменные такого типа и хранящиеся в них значения.

  Что выведет следующий код?

  ```java
  var a = 10;
  var b = a;
  a = 20;
  System.out.println(b);
  ```

  Будет выведено `10`, поскольку при присваивании `b = a` число `10`, которое в этот момент содержится в `a`, будет записано в переменную `b`.

  Если же написать

  ```java
  var a = "string";
  var b = a;
  ```

  - то ситуация будет другой.

  #### Вкратце

  Типы данных в Java:

  - Строки в кавычках
  - Числа `7`, `-198`, `0` и так далее

  На самом деле их больше, но сейчас поговорим только про них.
  ---

  Бывают разные способы представлять данные в программах.

  Есть **строки** — наборы символов в кавычках вроде `"Hello, World!"`. Есть **целые числа** — например, `7`, `-198`, `0`. Это две разные категории информации — два разных **типа данных**.

  Операция умножения имеет смысл для целых чисел, но не имеет смысла для строк: умножать слово «мама» на слово «блокнот» — бессмыслица.

  **Тип данных определяет, что можно делать с элементами конкретного множества информации.**

  Язык программирования распознает типы. Поэтому Java не позволит нам умножать строку на строку («умножать текст на текст»). Но позволит умножать целое число на другое целое число. Наличие типов и таких ограничений в языке защищает программы от случайных ошибок.

  В отличие от строк, числа оборачивать в кавычки не нужно. Чтобы напечатать число *5*, достаточно написать:

  ```java
  System.out.println(5); //=> 5
  ```

  Обратите внимание, что число `5` и строка `"5"` — совершенно разные вещи, хотя вывод у `System.out.println()` для этих данных идентичный.

  Целые числа (`1`, `34`, `-19` и т.д.) и рациональные числа (`1.3`, `1.0`, `-14.324` и т.д.) — это два отдельных **типа данных**. Такое разделение связано с особенностями устройства компьютеров. **Есть и другие типы**, с ними мы познакомимся позже.

  Вот еще один пример, но уже с рациональным числом:

  ```java
  System.out.println(10.234); // => 10.234
  ```

  (По-английски строки в программировании называются "strings", а строчки текстовых файлов называются "lines". Например, в коде выше одна строчка (lines), и нет никаких строк (strings). В русском иногда может быть путаница, поэтому во всех уроках мы будем говорить **строка** для обозначения типа данных «строка», и **строчка** для обозначения строчек (lines) в файлах).

  Программисты сами могут создавать новые типы данных, хотя и с определенными ограничениями.

instructions: |
  Выведите на экран число `-0.304`.

tips:
  - |
    [Статья о дробных числах](https://habrahabr.ru/post/112953/)

# definitions:
#   - name: "Тип данных"
#     description: "множество данных в коде (разновидность информации). Тип определяет, что можно делать с элементами конкретного множества. Например, целые числа, рациональные числа, строки — это разные типы данных."
#   - name: "Примитивные типы данных"
#     description: "простые типы, встроенные в сам язык программирования."
#   - name: "Строка (String)"
#     description: |
#       тип данных, описывающий набор символов (иными словами — текст); например, `"text"`
