---

name: Что такое переменная
theory: |

  Представьте себе задачу, нам нужно напечатать на экран фразу _Father!_ два раза или даже пять раз. Эту задачу можно решить в лоб:

  ```java
  System.out.println("Father!"); // => Father!
  System.out.println("Father!"); // => Father!
  ```

  В простейшем случае так и стоит поступить, но если фраза _Father!_ начнет использоваться чаще, да еще и в разных частях программы, то придется ее везде повторять. Проблемы с таким подходом начнутся тогда, когда понадобится изменить нашу фразу, а такое происходит довольно часто. Нам придется найти все места где использовалось фраза _Father!_ и выполнить необходимую замену. А можно поступить по другому. Вместо копирования нашего выражения, достаточно создать переменную с этой фразой.

  ```
  // greeting - переводится как приветствие
  var greeting = "Father!";
  System.out.println(greeting);
  System.out.println(greeting);
  ```

  В строчке `var greeting = "Father!"` - происходит присваивание значения `"Father!"` переменной с именем `greeting` .

  Когда переменная создана, можно начать её использовать. Она подставляется в те места, где раньше стояла наша фраза. Во время выполнения кода, в строке `System.out.println(greeting)` вместо переменной подставляется её содержимое, а затем выполняется код. В результате вывод нашей программы будет таким:

  <pre class='hexlet-basics-output'>
  Father!
  Father!
  </pre>

  Для имени переменной используется любой набор допустимых символов, к которым относятся буквы английского алфавита, цифры, знаки `-` и `_`. При этом цифру нельзя ставить в начале. Имена переменных регистрозависимы, то есть имя `hello` и имя `heLLo` - это два разных имени, а значит и две переменные.
  Количество создаваемых переменных никак не ограничено, большие программы содержат десятки и сотни тысяч имен переменных:

  ```java
  var greeting1 = "Father!";
  System.out.println(greeting1);
  System.out.println(greeting1);
  var greeting2 = "Mother!";
  System.out.println(greeting2);
  System.out.println(greeting2);
  ```

  <pre class='hexlet-basics-output'>
  Father!
  Father!
  Mother!
  Mother!
  </pre>

  Для удобства анализа программы, переменные принято создавать как можно ближе к тому месту где они используются.

instructions: |
  Создайте переменную с именем `motto` и содержимым `What Is Dead May Never Die!`. Распечайте содержимое переменной.
  <pre class='hexlet-basics-output'>
  What Is Dead May Never Die!
  </pre>

tips:
  - "[Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)"

# definitions:
#   - name: Переменная
#     description: "способ сохранить информацию и дать ей имя для последующего использования в коде."
