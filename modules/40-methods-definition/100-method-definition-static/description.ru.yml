---

name: Создание (определение) метода
theory: |

  Определение собственных методов значительно упрощает написание и поддержку программ. Методы позволяют объединять сложные (составные) операции в одну. Например, отправка письма на сайте - это достаточно сложный процесс, включающий в себя взаимодействие с внешними системами (интернет). Благодаря возможности определять методы, вся сложность может быть скрыта за одним простым методом:

  ```java
  // Место откуда берется метод
  import com.example.Mailer

  var email = "support@hexlet.io";
  var title = "Помогите";
  var body = "Я написал историю успеха, как я могу получить скидку?";

  // Mailer – имя класса по аналогии с тем как мы определяли App
  // Один маленький вызов — и много логики внутри
  Mailer.send(email, title, body);
  ```

  Создадим наш первый метод. Его задача - вывести на экран текущую дату:

  <pre class='hexlet-basics-output'>Today is: 2021-10-25</pre>

  ```java
  import java.time.LocalDate;

  // Определение метода
  // Определение не вызывает и не выполняет метод
  // Мы лишь говорим, что теперь такой метод существует
  public class App {
      public static void showCurrentDate() {
          // Встроенный метод в Java для получения текущего времени и даты
          var currentDate = LocalDate.now();
          var text = "Today is: " + currentDate;
          System.out.println(text);
      }
  }

  // Вызов метода
  // Обязательно указывать имя класса
  App.showCurrentDate(); // => "Today is: 2021-10-25"
  ```

  Определение метода в Java включает в себя много страшных слов, которые мы постепенно разберем. В целом, их можно разделить на две группы: то, что влияет на работу самого метода и то как этот метод видим за пределами класса.

  За видимость отвечает слово *public*, оно дает возможность вызывать методы снаружи класса, как в примере выше. Кроме него существует *private*, который разбирается на Хекслете в курсе по ООП в Java.

  За работу метода отвечают *static* и *void*. *static* отвязывает метод от объекта и делает возможным его вызов напрямую из класса. *void* используется тогда, когда метод ничего не возвращает. Например такое определение у метода `println()`. А вот если метод возвращает какие-то данные, то вместо *void* будет указан тип возвращаемых данных. Подробнее об этом дальше.

  В отличие от обычных данных, методы выполняют действия, поэтому их имена практически всегда должны быть глаголами: «построить что-то», «нарисовать что-то», «открыть что-то».

  Всё, что описывается внутри фигурных скобок `{}`, называется телом метода. Внутри тела можно описывать любой код. Считайте, что это маленькая самостоятельная программа, набор произвольных инструкций. Тело выполняется ровно в тот момент, когда запускается метод. Причём каждый вызов метода запускает тело независимо от других вызовов. Кстати, тело может быть пустым:

  ```java
  // Минимальное определение метода
  public class App {
      public static void noop() {
          // Тут мог бы быть код, но его нет
          // Обратите внимание на отступы
          // Для читаемости, любой код внутри тела сдвигается вправо на 4 пробела
      }
  }

  App.noop();
  ```

  Понятие «создать метод» имеет много синонимов: «реализовать», «определить» и даже «заимплементить» (от слова implement). Все они встречаются в повседневной практике на работе.

instructions: |

  Реализуйте статический метод с именем `printMotto()`, который выведет на экран фразу *Winter is coming*.

  ```java
  // Класс App уже определен
  App.printMotto(); // => Winter is coming
  ```

  Чтобы мы могли вызвать этот метод снаружи, нужно его пометить не только ключевым словом `static`, но еще и `public`.

  **Не забудьте!** В задачах, в которых нужно реализовать метод, этот метод вызывать не нужно. Вызывать метод будут автоматизированные тесты, которые проверяют его работоспособность. Пример с вызовом выше показан только для того, чтобы вы понимали, как ваш метод будет использоваться.

tips:
  - |
    [Именование в программировании](https://ru.hexlet.io/blog/posts/naming-in-programming)
