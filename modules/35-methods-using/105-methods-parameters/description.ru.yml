---

name: Параметры методов
theory: |

  Такой метод как `length()` не требует никаких уточнений. Он всегда работает однозначно и извлекает полную длину строки. Но так бывает не всегда, например если мы хотим извлечь первый символ из строки, то нам нужно явно указать что символ первый. Для этого в вызовы методов можно передавать аргументы. Пример:

  ```java
  var searchEngine = "google";
  // Возвращает первый символ (тип char)
  searchEngine.charAt(0); // 'g'
  ```

  Почему символ первый, а указан 0? В программировании отсчет начинается с нуля. Поэтому первый символ находится на нулевой позиции или как говорят его индекс 0. Соответственно у последнего символа индекс это длина строки - 1.

  ```java
  // google length = 6
  searchEngine.charAt(5); // 'e'
  ```

  ## Несколько аргументов

  Параметров может быть больше чем один. Например метод `replace()` работает с двумя, где первый это что заменить и второй – на что.

  ```java
  searchEngine.replace("go", "mo"); // "moogle"
  ```

  ## Значения по умолчанию

  Параметры могут содержать значение по умолчанию, там где это значение является наиболее часто используемым. Такая возможность в языках добавлена исключительно для избавления программиста от рутины. Простой пример – метод извлекающий подстроку (часть строки) из строки. Первым параметром этот метод принимает на вход индекс с которого надо начать извлекать подстроку, а вторым – индекс до которого нужно извлекать символы. По умолчанию берется строка до конца:

  ```java
  "hexlet".substring(1);    // "exlet"
  "hexlet".substring(1, 2); // "e"
  "hexlet".substring(1, 3); // "ex"
  "hexlet".substring(3, 6); // "let"
  ```

instructions: |

  Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:

  1. третий символ из первой строки;
  2. второй символ из второй строки;
  3. четвертый символ из третьей строки;
  4. пятый символ из второй строки;
  5. третий символ из второй строки.

  Вывод результата должен быть примерно в таком виде:

  <pre class='hexlet-basics-output'>
  a b c d e
  </pre>

# tips: []

# definitions:
#   - name: Метод
#     description: "операция, способная принимать данные и возвращать результат; Метод вызывается так: `foo()`."
#   - name: Аргумент
#     description: "информация, которую метод получает при вызове. Например, `foo(42)` — передача аргумента `42` методу `foo`"
