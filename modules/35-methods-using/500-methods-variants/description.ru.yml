---

name: Какие бывают методы
theory: |

  Одна из базовых тем в Java, на которой строится код – классы и объекты. Базовая потому что все это появляется буквально с первых строчек кода, но она совсем не базовая с точки зрения понимания и использования. Поэтому изучение растягивается на множество уроков. В этом уроке, мы чуть больше окунемся в устройство языка, но не переживайте что пазл все еще не складывается, это нормально, мы пока не готовы полноценно говорить об ООП в Java.

  Мы уже сталкивались с методами встроенными в Java в разных формах:

  ```java
  System.out.println();
  varname.toLowerCase();
  Paths.get();
  Files.readString();
  Integer.parseInt();
  ChronoUnit.DAYS.between()
  ```

  Все подобные вызовы можно разбить на две группы: 1. Вызовы методов у объектов, таких как строки 2. Вызовы статических методов, наподобие нашего метода `main()`, который мы реализуем в каждой практике.

  ## Вызовы методов у объектов

  Из объектов мы пока сталкивались только со строками, но принцип одинаковый для любых объектов. Ниже несколько примеров:

  ```java
  // Где-то здесь создаются объекты

  // извлекает имя у пользователя
  user.getName();
  // извлекает текущий день
  currentdate.getDayOfMonth();
  // проверка того, что файл существует
  file.exists();
  ```

  Такие методы выполняют действия над объектами у которых они вызываются и часто не принимают никаких аргументов. Объекты для простоты можно воспринимать как данные, которые доступны внутри метода. Например метод строки `toLowerCase()`, внутри себя берет исходную строку, преобразует ее и возвращает результат наружу.

  Кстати, `System.out.println()` это метод объекта `out`, который, в свою очередь, лежит внутри класса `System`.

  ## Вызовы статических методов

  Но не все вызовы методов связаны с объектами. В тех случаях, когда действие есть, а объекта нет – используются статические методы. Что это может быть? Математические операции над числами или какие-то действия, которые не относятся к конкретному объекту, а имеют отношение ко всем объектам данного типа. В таком случае метод, почти всегда, опирается на данные, которые приходят в виде параметров.

  ```java
  // Получение случайного числа. Вызов напрямую из класса Math
  Math.random();

  // Чтение данных по указанному пути
  Files.readString(path);
  ```

  Классы `Math` и `Files` в данном случае нужны только для вызова, потому что методы определены внутри них. Но сами методы с классами не взаимдействуют, в отличии от вызовов методов у объектов.

  Честно говоря, здесь не все так просто. Всегда можно придумать какой-то объект, над которым происходит вычисление. Так же верно и обратное, всегда можно обойтись без объектов. Есть языки в которых объектов нет вообще. В конечном итоге, все решают те кто проектирует конкретную часть кода.

  ```java
  // Без объекта, через класс, хотя можно было бы и через объект файла
  Files.readString(path);
  ```

  ## Итого

  * Статические методы вызываются прямо из класса напрямую. Они не связаны с конкретными объектами
  * Не статические (методы объектов) вызываются у конкретных объектов и строят свою логику относительно данных самого объекта

  Все это плавно подводит нас к возможности самостоятельно создавать классы, объекты и методы, без чего невозможно себе представить ни одну даже небольшую программу.


instructions: |

  В переменной `emoji` находится текстовый грустный смайлик *-(*. Ваша задача сделать этот смайлик веселый с помощью двух преобразований:

    * Добавить слева глаза *:*
    * Заменить *(* на *)*

  Должно получиться: *:-)*. Выведите его на экран.

# tips:
#   - |
#     [Как искать техническую информацию](https://guides.hexlet.io/how-to-search/)

# definitions:
#   - name: Побочный эффект
#     description: "действие, которое изменяет внешнее окружение (среду выполнения). Например, вывод на экран или отправка письма."
