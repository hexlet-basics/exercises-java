---

name: Конструкция Switch
theory: |

  Многие языки в дополнение к условной конструкции *if* включают в себя **switch**. Это специализированная версия *if*, созданная для некоторых особых ситуаций. Например, её имеет смысл использовать там, где есть цепочка *if else* с проверками на равенство. Например:

  ```java
  if (status.equals("processing")) {
      // Делаем раз
  } else if (status.equals("paid")) {
      // Делаем два
  } else if (status.equals("new")) {
      // Делаем три
  } else {
      // Делаем четыре
  }
  ```

  Эта составная проверка обладает одной отличительной чертой: каждая ветка здесь — это проверка значения переменной `status`. Switch позволяет записать этот код короче и выразительнее:

  ```java
  switch (status) {
      case 'processing':
          // Делаем раз
          break;
      case 'paid':
          // Делаем два
          break;
      case 'new':
          // Делаем три
          break;
      default: // else
          // Делаем четыре
  }
  ```

  Свитч — довольно сложная конструкция с точки зрения количества элементов, из которых она состоит:

  * Внешнее описание, в которое входит ключевое слово `switch`. Переменная, по значениям которой *switch* будет выбирать поведение. И фигурные скобки для вариантов выбора.
  * Конструкции `case` и `default`, внутри которых описывается поведение для разных значений рассматриваемой переменной. Каждый `case` соответствует `if` в примере выше. `default` - это особая ситуация, соответствующая ветке `else` в условных конструкциях. Как `else`, указывать `default` не обязательно.
  * `break` нужен для предотвращения «проваливания». Если его не указать, то после выполнения нужного `case` выполнение перейдет к следующему `case`, и так либо до ближайшего `break`, либо до конца *switch*.

  Фигурные скобки в *switch* не определяют блок кода, как это было в других местах. Внутри допустим только тот синтаксис, который показан выше. То есть там можно использовать `case` или `default`. А вот внутри каждого `case` (и `default`) ситуация другая. Здесь можно выполнять любой произвольный код:

  ```java
  switch (count) {
    case 1:
      // Делаем что-то полезное
      break;
    case 2:
      // Делаем что-то полезное
      break;
    default:
      // Что-то делаем
  }
  ```

  Switch хоть и встречается в коде, но технически всегда можно обойтись без него. Ключевая польза при его использовании в том, что он лучше выражает намерение программиста, когда нужно проверять конкретные значения переменной. Хотя кода и стало физически чуть больше, читать его легче, в отличие от блоков *else if*.

instructions: |

  Реализуйте метод `getNumberExplanation()`, который принимает на вход число и возвращает объяснение этого числа. Если для числа нет объяснения, то возвращается `null`:

  ```java
  App.getNumberExplanation(8);   // null

  // Объяснения есть только для указанных ниже чисел
  App.getNumberExplanation(666); // "devil number"
  App.getNumberExplanation(42);  // "answer for everything"
  App.getNumberExplanation(7);   // "prime number"
  ```

# tips:
#   - |
#     [switch](https://developer.mozilla.org/ru/docs/Web/java/Reference/Statements/switch)

definitions: []

