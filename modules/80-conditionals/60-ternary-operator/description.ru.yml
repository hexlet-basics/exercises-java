---

name: Тернарный оператор
theory: |

  Посмотрите на определение метода, которая возвращает модуль переданного числа:

  ```java
  // Если больше нуля то само число, если меньше, то убираем знак
  public static int abs(number) {
    if (number >= 0) {
      return number;
    }

    return -number;
  }

  App.abs(10); // 10
  App.abs(-10); // 10
  ```

  В Java существует конструкция, которая по своему действию аналогична конструкции *if-else*, но при этом является выражением. Она называется **тернарный оператор**. Тернарный оператор — единственный в своем роде оператор, требующий три операнда. Он помогает писать меньше кода для простых условных выражений. Наш пример выше с тернарным оператором превращается в три строки кода:

  ```java
  public static int abs(number) {
    return number >= 0 ? number : -number;
  }
  ```

  Общий шаблон выглядит так: `<predicate> ? <expression on true> : <expression on false>`. То есть сначала мы записываем логическое выражение, а дальше два разных варианта поведения, первый, сразу после вопроса, выполняется если условие истино, и второй, после двоеточия выполняется если условие ложно.

instructions: |

  Реализуйте метод `convertText()`, который принимает на вход строку и, если первая буква не заглавная, возвращает перевернутый вариант исходной строки. Если первая буква заглавная, то строка возвращается без изменений. Если на вход передана пустая строка, метод должен вернуть пустую строку.

  ```java
  App.convertText("Hello"); // "Hello"
  App.convertText("hello"); // "olleh"

  // Не забудьте учесть пустую строку!
  App.convertText(""); // ""
  ```

  * `StringUtils.reverse()` – переворот строки
  * `Character.isUpperCase()` – проверка символа на верхний регистр

  Попробуйте написать два варианта функции: с обычным if-else, и с тернарным оператором.

tips: []

definitions:
  - name: Тернарный оператор
    description: |
      Способ превратить простую условную инструкцию в выражение, например, `number >= 0 ? number : -number`.
