---

name: Какие бывают типы
theory: |

  В этом уроке мы рассмотрим систему типов в Java с высоты птичьего полета, не погружаясь в детали. Но сначала ответим на вопрос, зачем вообще про них знать? В коде программ мы все время оперируем данными. Эти данные имеют разную природу, могут быть по разному организованы, что влияет и на удобство работы с ними и эффективность этой работы. Типы преследуют нас буквально на каждом шагу, поэтому без их изучения программирование на Java возможно только на очень базовом уровне.

  С другой стороны не пытайтесь запомнить всю эту информацию про типы наизусть (иначе можно приуныть). Она дается лишь для общего представления. Все что надо знать про типы вы и так выучите в процессе программирования.

  Глобально, типы данных в Java деляться на две большие группы:

  * Примитивные. Предопределены в Java
  * Ссылочные (не примитивные). Создаются самим программистом (кроме *String*)

  У этих групп есть различия, которые мы разберем позже, когда познакоимся с null и объектно-ориентированным программированием. Пока достаточно знания того, что имена примитивных типов начинаются с нижнего регистра (int), а ссылочных с верхнего (String).

  Всего в Java 8 примитивных типов данных: *byte*, *short*, *int*, *long*, *float*, *double*, *boolean* and *char*. Первые 4 это целые числа разного размера. Например *byte* занимает в памяти, как ни трудно догадаться, один байт, а значит может хранить числа от 0 до 255 (здесь мы не погружаемся в основы двоичной системы счисления, просто поверьте на слово -)). *short* – 2 байта, *int* – 4 байта и *long* – 8 байт. Пример:

  ```java
  byte x = 3; // Отработает без проблем

  // Error: incompatible types: possible lossy conversion from int to byte
  byte y = 270;
  ```

  Определение переменной `y` завершилось с ошибкой, потому что мы указали тип *byte*, но присвоили переменной значение *270*, которое выходит за множество возможных значений.

  Возникает закономерный вопрос. Зачем аж 4 типа для хранения чисел? Почему бы не сделать один, в который влезает почти любое большое число? Технически так сделать можно, но мы находимся в мире инженерных решений. Это значит, что у любого решения всегда есть обратная сторона, поэтому невозможно сделать идеально, придется чем-то пожертвовать. В данном случае, объемом занимаемой памяти. Если оставить только *long*, то программа активно оперирующая числами начнет занимать слишком много места в оперативной памяти, что может быть критично.

  Такая же логика использовалась для типов *float* и *double*. Они оба отвечают за рациональные числа, разница лишь в том, что *double* это "двойной" *float*, то есть в памяти он занимает в два раза больше места.

  Создатели Java полагаются на разумность программистов. На их способность правильно подобрать нужные типы в зависимости от задачи. Для каких-то экстремальных приложений так и происходит, но в типичной разработке все просто. Программисты выбирают *int* для целых чисел и *double* для рациональных.

  Тип *boolean* отвечает за логические значения `true` и `false`. Впереди им посвящен целый раздел, там мы про него и поговорим.

  Особняком стоит тип *char* (символ). Символ это не строка, у него другой способ определения, через одиночные кавычки:

  ```java
  char ch = 'a';

  // Error: incompatible types: java.lang.String cannot be converted to char
  char ch2 = "b";
  ```

  Строка состоящая из одного символа это не символ. С точки зрения здравого смысла кажется не логично, но, с точки зрения, типов все так и должно быть, со временем вы это прочувствуете.

  Извлечение символа из строки извлекает как раз символ, а не строку состоящую из одного символа.

  ```java
  "hexlet".charAt(1); // 'e'
  ```

  Хорошо, а где *String* спросите вы? *String* не является примитивным типом, внутри она представляет из себя массив символов. Несмотря на это техническое различие, строки используются наравне с примитивными типами без особых отличий.

instructions: |
  Выведите на экран результат конкатенации слова *hexlet*, символа *-* и числа 7

tips:
  - |
    Попробуйте поиграть с конкатенированием строк и символов в jshell
  - |
    [Статья о дробных числах](https://habrahabr.ru/post/112953/)

# definitions:
#   - name: "Тип данных"
#     description: "множество данных в коде (разновидность информации). Тип определяет, что можно делать с элементами конкретного множества. Например, целые числа, рациональные числа, строки — это разные типы данных."
#   - name: "Примитивные типы данных"
#     description: "простые типы, встроенные в сам язык программирования."
#   - name: "Строка (String)"
#     description: |
#       тип данных, описывающий набор символов (иными словами — текст); например, `"text"`
